import{_ as d}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as s,o as r,c as g,b as t,d as e,e as o,w as n,f as a}from"./app-1hRPzG69.js";const l="/yjh-BlogsSite/assets/lifecycle-b1zbZA_x.png",p={},h=a('<h1 id="git-快速入门" tabindex="-1"><a class="header-anchor" href="#git-快速入门"><span>Git 快速入门</span></a></h1><h2 id="获取git仓库" tabindex="-1"><a class="header-anchor" href="#获取git仓库"><span>获取git仓库</span></a></h2><p>获取git仓库通常有两种方式：</p><ol><li>将 <strong>尚未进行版本控制</strong> 的本地项目目录 <strong>转换</strong> 为 Git 仓库；</li><li>从远端服务器 <strong>克隆</strong> 一个 <em>已存在</em> 的 Git 仓库</li></ol><p>通过上述两种方式，你可以在自己电脑上得到git本地仓库</p><h3 id="本地项目转git仓库" tabindex="-1"><a class="header-anchor" href="#本地项目转git仓库"><span>本地项目转Git仓库</span></a></h3><p>对于某尚未进行版本控制的本地目录，想用 Git 进行控制，首先需要通过 <code>git init</code> <strong>初始化</strong> git仓库【该命令将创建一个名为 .git 的子目录，其中含有你初始化的 Git 仓库中所有的必须文件。 此时我们仅仅是对仓库进行初始化，你的项目里的文件还没有被跟踪】，然后通过 <code>git remote add name &lt;remote-repository-url&gt;</code> 将本地仓库与远端git仓库进行<strong>绑定</strong></p><h3 id="远程克隆git仓库" tabindex="-1"><a class="header-anchor" href="#远程克隆git仓库"><span>远程克隆git仓库</span></a></h3><p>如果代码存在于远端服务器中 <em>且被git所管理</em> ，则我们可以通过 <code>git clone &lt;remote-repository-url&gt;</code> 将远端服务器的git仓库克隆到本地相应位置</p><h2 id="git基础操作" tabindex="-1"><a class="header-anchor" href="#git基础操作"><span>git基础操作</span></a></h2><blockquote><p>git的基础操作大致为：<strong>暂存代码 ---&gt; 提交代码 ---&gt; 将代码推送到仓库</strong></p><p>具体操作还有诸如<strong>回滚</strong>、<strong>合并</strong>等</p></blockquote><figure><img src="'+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>工作目录下的每一个文件都不外乎这两种状态：<strong>已跟踪</strong> 或 <strong>未跟踪</strong>。 <em>已跟踪的文件是指那些被纳入了版本控制的文件</em> ；</p><p><strong>查看文件的状态</strong> ，我们可以使用 <code>git status</code> 命令实现</p><h3 id="暂存代码" tabindex="-1"><a class="header-anchor" href="#暂存代码"><span>暂存代码</span></a></h3><p>当代码修改后，代码将处于 <strong>未暂存</strong> 状态，这时我们需要通过 <code>git add &lt;file-name&gt;</code> 将修改的代码放入git <strong>暂存区</strong> 中（类似于word中的保存文档）</p><p>当我们需要取消对某代码的暂存时，我们可以通过 <code>git reset</code> 命令来<strong>取消暂存</strong></p><ul><li>取消暂存整个文件：<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>  <span class="token function">git</span> reset FILE_NAME
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>将 FILE_NAME 替换为你想要取消暂存的文件名。</li><li>取消暂存文件的部分更改（需要使用 git add -p 命令的交互模式）：<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>  <span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>然后按照提示操作，选择你想要取消暂存的代码块</li></ul>`,18),m=t("code",null,"git reset",-1),f=a('<h3 id="提交代码" tabindex="-1"><a class="header-anchor" href="#提交代码"><span>提交代码</span></a></h3><p>在暂存完代码后，我们便可以通过 <code>git commit</code> 相关命令将代码<strong>提交到本地仓库</strong></p><ul><li><code>git commit -a</code> ：可以不使用<code>git add</code>的情况下直接提交全部代码到仓库</li><li><code>git commit -m &lt;msg&gt;</code> ：提交时指定提交信息</li><li><code>git commit [file1] [file2] ... -m &lt;msg&gt;</code> ：提交暂存区的指定文件到仓库区：</li></ul><p>另外有时候我们提交完了才发现漏掉了几个文件没有添加【或者提交信息写错了】，此时可以通过 <code>git commit --amend</code> 重新提交</p><h3 id="推送代码" tabindex="-1"><a class="header-anchor" href="#推送代码"><span>推送代码</span></a></h3>',5),u=t("strong",null,"将暂存区代码提交到了本地仓库",-1),_=t("code",null,"git push <远程主机名> <本地分支名>:<远程分支名>",-1),b=t("code",null,"-f",-1),x=t("strong",null,"强制推送",-1),v=a('<ul><li><strong>提交代码</strong> ：将暂存区代码提交到了<strong>本地</strong>仓库；</li><li><strong>推送代码</strong> ：将代码从本地git仓库推送到<strong>远程</strong>git仓库</li></ul><h2 id="git进阶操作" tabindex="-1"><a class="header-anchor" href="#git进阶操作"><span>git进阶操作</span></a></h2><h3 id="分支" tabindex="-1"><a class="header-anchor" href="#分支"><span>分支</span></a></h3><blockquote><p>Git 保存的不是文件的变化或者差异，而是一系列不同时刻的 <strong>快照</strong></p><p>Git 的分支，其实本质上是 <em>指向提交对象的 <strong>可变指针</strong></em> 。 Git 的默认分支名字是 master。</p></blockquote><p>我们可以通过 <code>git branch</code> 相关命令对分支进行 <strong>管理</strong> 【创建、删除、查看等】；通过 <code>git checkout</code> 相关命令对分支进行 <strong>切换</strong> ；通过 <code>git merage &lt;分支名&gt;</code> 相关命令来 <strong>将某分支合并到当前分支</strong> ；</p><p>此外，我们可以通过 <code>git fetch &lt;远程主机名&gt; &lt;分支名&gt;</code> 相关命令，<strong>从远程仓库获取最新更改但不自动合并或修改当前工作区。fetch操作只是获取远程仓库的更新，并不会自动将这些更新应用到你的本地工作区</strong></p><p><em>请牢记：当你切换分支的时候，Git 会重置你的工作目录，使其看起来像回到了你在那个分支上最后一次提交的样子。 Git 会自动添加、删除、修改文件以确保此时你的工作目录和这个分支最后一次提交时的样子一模一样</em></p><p>补充：</p><ul><li><code>git checkout -b &lt;branch-name&gt;</code> 相当于创建并切换到某分支</li><li><code>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</code> 相当于拉取并合并冲突分支</li><li><code>--merged</code> 与 <code>--no-merged</code> 这两个选项可以 <strong>过滤这个列表中已经合并或尚未合并到当前分支的分支</strong> 。</li></ul><h3 id="比较文件差异" tabindex="-1"><a class="header-anchor" href="#比较文件差异"><span>比较文件差异</span></a></h3><p>在合并分支时，如果遇到分支冲突，可以通过 <code>git diff</code> 相关命令比较文件差异。具体而言，如下：</p><ul><li><code>git diff</code>: 显示工作区与暂存区之间的差异。</li><li><code>git diff</code> --cached 或 git diff --staged: 显示暂存区与最后一次提交之间的差异。</li><li><code>git diff HEAD</code>: 显示工作区与最后一次提交之间的差异。</li><li><code>git diff &lt;commit&gt;</code>: 显示工作区与指定提交之间的差异。</li><li><code>git diff &lt;commit1&gt; &lt;commit2&gt;</code>: 显示两个提交之间的差异。</li><li><code>git diff --&lt;file&gt;</code>: 显示指定文件在工作区与暂存区之间的差异。</li><li>...</li></ul><h3 id="打标签" tabindex="-1"><a class="header-anchor" href="#打标签"><span>打标签</span></a></h3><p>我们可以通过 <code>git tag</code> 相关命令，对仓库历史中的某一个提交打上标签，以示重要，具体内容可参照git文档</p><h3 id="文档查看" tabindex="-1"><a class="header-anchor" href="#文档查看"><span>文档查看</span></a></h3><p>在每个git命令后面加上 <code>--help</code> 可以查看相关git文档</p><p>如：<code>git branch --help</code> 将会显示 <code>git branch</code> 相关的文档，<strong>里面详细阐明了命令使用方式</strong></p><h3 id="其他常用命令" tabindex="-1"><a class="header-anchor" href="#其他常用命令"><span>其他常用命令</span></a></h3><p><code>git log</code>：git日志</p><hr><p>参考资料：</p>',21),G={href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"};function k(E,N){const i=s("font"),c=s("ExternalLinkIcon");return r(),g("div",null,[h,t("p",null,[t("strong",null,[e("请注意，"),o(i,{color:"red"},{default:n(()=>[m,e(" 命令只是将更改从暂存区移回工作区，它不会撤销任何实际的文件更改 ")]),_:1})])]),f,t("p",null,[e("提交代码只是 "),u,e(" ，下面我们还需要通过推送代码将代码从本地git仓库推送到远程git仓库中（如Gitee、Github、Gitlab等）。我们可以通过 "),_,e(" 命令实现，其中添加 "),b,e(" 可以"),x,e("，"),o(i,{color:"red"},{default:n(()=>[e("需谨慎使用")]),_:1})]),t("p",null,[t("strong",null,[o(i,{color:"red"},{default:n(()=>[e(" 请务必注意: ")]),_:1})])]),v,t("p",null,[e("[1]. "),t("a",G,[e("由 Scott Chacon 和 Ben Straub 撰写并由 Apress 出版的整本 Pro Git 书"),o(c)])])])}const B=d(p,[["render",k],["__file","Git快速入门.html.vue"]]);export{B as default};
