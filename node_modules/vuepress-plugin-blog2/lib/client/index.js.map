{"version":3,"file":"index.js","sources":["../../src/client/composables/useBlogCategory.ts","../../src/client/composables/useBlogType.ts"],"sourcesContent":["import type { ComputedRef } from \"vue\";\nimport { computed, readonly, shallowRef } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport {\n  usePageData,\n  usePageFrontmatter,\n  useRouteLocale,\n} from \"vuepress/client\";\nimport { resolveRouteWithRedirect } from \"vuepress-shared/client\";\n\nimport { categoryMap } from \"@temp/blog/category\";\n\nimport type {\n  BlogCategoryFrontmatterOptions,\n  CategoryMap,\n} from \"../../shared/index.js\";\nimport type { BlogCategoryData } from \"../typings.js\";\n\n// eslint-disable-next-line\ndeclare const __VUE_HMR_RUNTIME__: Record<string, any>;\ndeclare const __VUEPRESS_DEV__: boolean;\ndeclare const BLOG_META_SCOPE: string;\n\nconst _blogCategoryMap = shallowRef(categoryMap);\n\nexport const blogCategoryMap = readonly(_blogCategoryMap);\n\nexport const useBlogCategory = <\n  T extends Record<string, unknown> = Record<string, unknown>,\n>(\n  key?: string,\n): ComputedRef<BlogCategoryData<T>> => {\n  const page = usePageData();\n  const frontmatter = usePageFrontmatter<{\n    blog?: BlogCategoryFrontmatterOptions;\n  }>();\n  const router = useRouter();\n  const routeLocale = useRouteLocale();\n\n  return computed(() => {\n    const mapKey = key ?? frontmatter.value.blog?.key ?? \"\";\n\n    if (!mapKey) {\n      console.warn(`useBlogCategory: key not found`);\n\n      // fallback data\n      return { path: \"/\", map: {} };\n    }\n\n    const routes = router.getRoutes();\n\n    if (!blogCategoryMap.value[mapKey])\n      throw new Error(`useBlogCategory: key ${mapKey} is invalid`);\n\n    const currentMap = blogCategoryMap.value[mapKey][routeLocale.value];\n    const result: BlogCategoryData<T> = {\n      path: currentMap.path,\n      map: {},\n    };\n\n    for (const category in currentMap.map) {\n      const categoryMap = currentMap.map[category];\n\n      result.map[category] = { path: categoryMap.path, items: [] };\n\n      for (const pageKey of categoryMap.keys) {\n        const route = routes.find(({ name }) => name === pageKey);\n\n        if (route) {\n          const finalRoute = resolveRouteWithRedirect(router, route.path);\n\n          result.map[category].items.push({\n            path: finalRoute.path,\n            info:\n              BLOG_META_SCOPE === \"\"\n                ? <T>finalRoute.meta\n                : <T>finalRoute.meta[BLOG_META_SCOPE],\n          });\n        }\n      }\n\n      if (page.value.path === categoryMap.path)\n        result.currentItems = result.map[category].items;\n    }\n\n    return result;\n  });\n};\n\n// @ts-ignore\nif (__VUEPRESS_DEV__ && (import.meta.webpackHot || import.meta.hot))\n  __VUE_HMR_RUNTIME__[\"updateBlogCategory\"] = (\n    map: Record<string, CategoryMap>,\n  ): void => {\n    _blogCategoryMap.value = map;\n  };\n","import type { ComputedRef } from \"vue\";\nimport { computed, readonly, shallowRef } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { usePageFrontmatter, useRouteLocale } from \"vuepress/client\";\nimport { resolveRouteWithRedirect } from \"vuepress-shared/client\";\n\nimport { typeMap } from \"@temp/blog/type\";\n\nimport type {\n  BlogTypeFrontmatterOptions,\n  TypeMap,\n} from \"../../shared/index.js\";\nimport type { BlogTypeData } from \"../typings.js\";\n\ndeclare const __VUE_HMR_RUNTIME__: Record<string, unknown>;\ndeclare const __VUEPRESS_DEV__: boolean;\ndeclare const BLOG_META_SCOPE: string;\n\nconst _blogTypeMap = shallowRef(typeMap);\n\nexport const blogTypeMap = readonly(_blogTypeMap);\n\nexport const useBlogType = <\n  T extends Record<string, unknown> = Record<string, unknown>,\n>(\n  key?: string,\n): ComputedRef<BlogTypeData<T>> => {\n  const frontmatter = usePageFrontmatter<{\n    blog?: BlogTypeFrontmatterOptions;\n  }>();\n  const router = useRouter();\n  const routeLocale = useRouteLocale();\n\n  return computed(() => {\n    const mapKey = key ?? frontmatter.value.blog?.key ?? \"\";\n\n    if (!mapKey) {\n      console.warn(`useBlogType: key not found`);\n\n      // fallback data\n      return { path: \"/\", items: [] };\n    }\n\n    if (!blogTypeMap.value[mapKey])\n      throw new Error(`useBlogType: key ${key} is invalid`);\n\n    const routes = router.getRoutes();\n    const configMap = blogTypeMap.value[mapKey][routeLocale.value];\n    const result: BlogTypeData<T> = {\n      path: configMap.path,\n      items: [],\n    };\n\n    for (const pageKey of configMap.keys) {\n      const route = routes.find(({ name }) => name === pageKey);\n\n      if (route) {\n        const finalRoute = resolveRouteWithRedirect(router, route.path);\n\n        result.items.push({\n          path: finalRoute.path,\n          info:\n            BLOG_META_SCOPE === \"\"\n              ? <T>finalRoute.meta\n              : <T>finalRoute.meta[BLOG_META_SCOPE],\n        });\n      }\n    }\n\n    return result;\n  });\n};\n\n// @ts-ignore\nif (__VUEPRESS_DEV__ && (import.meta.webpackHot || import.meta.hot))\n  __VUE_HMR_RUNTIME__[\"updateBlogType\"] = (\n    map: Record<string, TypeMap>,\n  ): void => {\n    _blogTypeMap.value = map;\n  };\n"],"names":["_blogCategoryMap","shallowRef","categoryMap","blogCategoryMap","readonly","useBlogCategory","key","page","usePageData","frontmatter","usePageFrontmatter","router","useRouter","routeLocale","useRouteLocale","computed","mapKey","routes","currentMap","result","category","pageKey","route","name","finalRoute","resolveRouteWithRedirect","map","_blogTypeMap","typeMap","blogTypeMap","useBlogType","configMap"],"mappings":"4VAuBA,MAAMA,EAAmBC,EAAWC,CAAW,EAElCC,EAAkBC,EAASJ,CAAgB,EAE3CK,EAGXC,GACqC,CACrC,MAAMC,EAAOC,EAAY,EACnBC,EAAcC,EAAAA,EAGdC,EAASC,EAAAA,EACTC,EAAcC,EAAe,EAEnC,OAAOC,EAAS,IAAM,CACpB,MAAMC,EAASV,GAAOG,EAAY,MAAM,MAAM,KAAO,GAErD,GAAI,CAACO,EACH,OAAA,QAAQ,KAAK,gCAAgC,EAGtC,CAAE,KAAM,IAAK,IAAK,EAAG,EAG9B,MAAMC,EAASN,EAAO,UAAA,EAEtB,GAAI,CAACR,EAAgB,MAAMa,CAAM,EAC/B,MAAM,IAAI,MAAM,wBAAwBA,CAAM,aAAa,EAE7D,MAAME,EAAaf,EAAgB,MAAMa,CAAM,EAAEH,EAAY,KAAK,EAC5DM,EAA8B,CAClC,KAAMD,EAAW,KACjB,IAAK,CAAA,CACP,EAEA,UAAWE,KAAYF,EAAW,IAAK,CACrC,MAAMhB,EAAcgB,EAAW,IAAIE,CAAQ,EAE3CD,EAAO,IAAIC,CAAQ,EAAI,CAAE,KAAMlB,EAAY,KAAM,MAAO,CAAG,CAAA,EAE3D,UAAWmB,KAAWnB,EAAY,KAAM,CACtC,MAAMoB,EAAQL,EAAO,KAAK,CAAC,CAAE,KAAAM,CAAK,IAAMA,IAASF,CAAO,EAExD,GAAIC,EAAO,CACT,MAAME,EAAaC,EAAyBd,EAAQW,EAAM,IAAI,EAE9DH,EAAO,IAAIC,CAAQ,EAAE,MAAM,KAAK,CAC9B,KAAMI,EAAW,KACjB,KACE,kBAAoB,GACbA,EAAW,KACXA,EAAW,KAAK,eAAe,CAC1C,CAAC,CACH,CACF,CAEIjB,EAAK,MAAM,OAASL,EAAY,OAClCiB,EAAO,aAAeA,EAAO,IAAIC,CAAQ,EAAE,MAC/C,CAEA,OAAOD,CACT,CAAC,CACH,EAGI,mBAAqB,YAAY,YAAc,YAAY,OAC7D,oBAAoB,mBAClBO,GACS,CACT1B,EAAiB,MAAQ0B,CAC3B,GC7EF,MAAMC,EAAe1B,EAAW2B,CAAO,EAE1BC,EAAczB,EAASuB,CAAY,EAEnCG,EAGXxB,GACiC,CACjC,MAAMG,EAAcC,EAEjB,EACGC,EAASC,IACTC,EAAcC,IAEpB,OAAOC,EAAS,IAAM,CACpB,MAAMC,EAASV,GAAOG,EAAY,MAAM,MAAM,KAAO,GAErD,GAAI,CAACO,EACH,OAAA,QAAQ,KAAK,4BAA4B,EAGlC,CAAE,KAAM,IAAK,MAAO,CAAG,CAAA,EAGhC,GAAI,CAACa,EAAY,MAAMb,CAAM,EAC3B,MAAM,IAAI,MAAM,oBAAoBV,CAAG,aAAa,EAEtD,MAAMW,EAASN,EAAO,UAAA,EAChBoB,EAAYF,EAAY,MAAMb,CAAM,EAAEH,EAAY,KAAK,EACvDM,EAA0B,CAC9B,KAAMY,EAAU,KAChB,MAAO,CAAA,CACT,EAEA,UAAWV,KAAWU,EAAU,KAAM,CACpC,MAAMT,EAAQL,EAAO,KAAK,CAAC,CAAE,KAAAM,CAAK,IAAMA,IAASF,CAAO,EAExD,GAAIC,EAAO,CACT,MAAME,EAAaC,EAAyBd,EAAQW,EAAM,IAAI,EAE9DH,EAAO,MAAM,KAAK,CAChB,KAAMK,EAAW,KACjB,KACE,kBAAoB,GACbA,EAAW,KACXA,EAAW,KAAK,eAAe,CAC1C,CAAC,CACH,CACF,CAEA,OAAOL,CACT,CAAC,CACH,EAGI,mBAAqB,YAAY,YAAc,YAAY,OAC7D,oBAAoB,eAClBO,GACS,CACTC,EAAa,MAAQD,CACvB"}