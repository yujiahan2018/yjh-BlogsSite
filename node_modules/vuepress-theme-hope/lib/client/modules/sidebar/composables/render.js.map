{"version":3,"file":"render.js","sourceRoot":"","sources":["../../../../../src/client/modules/sidebar/composables/render.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACxB,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAElD,OAAO,QAAQ,MAAM,iCAAiC,CAAC;AACvD,OAAO,QAAQ,MAAM,iCAAiC,CAAC;AACvD,OAAO,EAAE,mBAAmB,EAAE,MAAM,yCAAyC,CAAC;AAQ9E,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,MAA2B,EAC3B,KAAqB,EACd,EAAE,CACT,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC;IACnB,CAAC,CAAC,kDAAkD;QAClD,CAAC,CAAC,QAAQ,EAAE;YACV,GAAG,KAAK;YACR,MAAM,EAAE,MAAsB;SAC/B,CAAC;IACJ,CAAC,CAAC,gDAAgD;QAChD,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;AAEvE,MAAM,CAAC,MAAM,qBAAqB,GAAG,CACnC,QAAqC,EACvB,EAAE;IAChB,MAAM,KAAK,GAAG,QAAQ,EAAE,CAAC;IAEzB,OAAO,QAAQ;QACb,CAAC,CAAC,CAAC,CACC,IAAI,EACJ,EAAE,KAAK,EAAE,wBAAwB,EAAE,EACnC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CACrB,CAAC,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,uBAAuB,EAAE,EAAE;YAC1C,iBAAiB,CAAC,KAAK,EAAE;gBACvB,KAAK,EAAE;oBACL,iBAAiB;oBACjB,YAAY;oBACZ,EAAE,MAAM,EAAE,mBAAmB,CAAC,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE;iBACpD;aACF,CAAC;YACF,qBAAqB,CAAC,KAAK,CAAC,QAAQ,CAAC;SACtC,CAAC,CACH,CACF;QACH,CAAC,CAAC,IAAI,CAAC;AACX,CAAC,CAAC","sourcesContent":["import type { VNode } from \"vue\";\nimport { h } from \"vue\";\nimport { useRoute } from \"vue-router\";\nimport { isString } from \"vuepress-shared/client\";\n\nimport AutoLink from \"@theme-hope/components/AutoLink\";\nimport HopeIcon from \"@theme-hope/components/HopeIcon\";\nimport { isActiveSidebarItem } from \"@theme-hope/modules/sidebar/utils/index\";\n\nimport type { AutoLinkOptions as AutoLinkType } from \"../../../../shared/index.js\";\nimport type {\n  ResolvedSidebarHeaderItem,\n  ResolvedSidebarItem,\n} from \"../utils/index.js\";\n\nexport const renderSidebarItem = (\n  config: ResolvedSidebarItem,\n  props: VNode[\"props\"],\n): VNode =>\n  isString(config.link)\n    ? // if the item has link, render it as `<AutoLink>`\n      h(AutoLink, {\n        ...props,\n        config: config as AutoLinkType,\n      })\n    : // if the item only has text, render it as `<p>`\n      h(\"p\", props, [h(HopeIcon, { icon: config.icon }), config.text]);\n\nexport const renderSidebarChildren = (\n  children: ResolvedSidebarHeaderItem[],\n): VNode | null => {\n  const route = useRoute();\n\n  return children\n    ? h(\n        \"ul\",\n        { class: \"vp-sidebar-sub-headers\" },\n        children.map((child) =>\n          h(\"li\", { class: \"vp-sidebar-sub-header\" }, [\n            renderSidebarItem(child, {\n              class: [\n                \"vp-sidebar-link\",\n                \"vp-heading\",\n                { active: isActiveSidebarItem(route, child, true) },\n              ],\n            }),\n            renderSidebarChildren(child.children),\n          ]),\n        ),\n      )\n    : null;\n};\n"]}