import type { Router } from "vue-router";
import type { PageData, PageHeader } from "vuepress/client";
import type { SidebarArrayOptions, SidebarObjectOptions, SidebarOptions } from "../../../../shared/index.js";
import type { ResolvedSidebarHeaderItem, ResolvedSidebarItem } from "../utils/index.js";
/**
 * Util to transform page header to sidebar item
 */
export declare const headersToSidebarItemChildren: (page: PageData, headers: PageHeader[], headerDepth: number) => ResolvedSidebarHeaderItem[];
export interface ResolveArraySidebarOptions {
    config: SidebarArrayOptions;
    router: Router;
    page: PageData;
    headerDepth: number;
    prefix?: string;
}
/**
 * Resolve sidebar items if the config is an array
 */
export declare const resolveArraySidebarItems: ({ config, router, page, headerDepth, prefix, }: ResolveArraySidebarOptions) => ResolvedSidebarItem[];
export interface ResolveMultiSidebarOptions {
    config: SidebarObjectOptions;
    router: Router;
    page: PageData;
    headerDepth: number;
}
/**
 * Resolve sidebar items if the config is a key -> value (path-prefix -> array) object
 */
export declare const resolveMultiSidebarItems: ({ config, router, page, headerDepth, }: ResolveMultiSidebarOptions) => ResolvedSidebarItem[];
export interface ResolveSidebarOptions {
    config: SidebarOptions;
    router: Router;
    routeLocale: string;
    page: PageData;
    headerDepth: number;
}
/**
 * Resolve sidebar items global computed
 *
 * It should only be resolved and provided once
 */
export declare const resolveSidebarItems: ({ config, router, routeLocale, page, headerDepth, }: ResolveSidebarOptions) => ResolvedSidebarItem[];
